# Generated by Django 5.2.6 on 2025-10-07 00:49

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du badge')),
                ('description', models.TextField(verbose_name='Description')),
                ('icon', models.CharField(help_text='Icône FontAwesome', max_length=50, verbose_name='Icône')),
                ('color', models.CharField(default='#007bff', help_text='Couleur hexadécimale', max_length=7, verbose_name='Couleur')),
                ('badge_type', models.CharField(choices=[('profile_completion', 'Complétion de profil'), ('job_application', 'Candidature'), ('cv_creation', 'Création de CV'), ('skill_verification', 'Vérification de compétences'), ('referral', 'Parrainage'), ('achievement', 'Réussite'), ('streak', 'Série'), ('social', 'Social')], max_length=30, verbose_name='Type de badge')),
                ('points', models.PositiveIntegerField(default=10, verbose_name='Points attribués')),
                ('rarity', models.CharField(choices=[('common', 'Commun'), ('uncommon', 'Peu commun'), ('rare', 'Rare'), ('epic', 'Épique'), ('legendary', 'Légendaire')], default='common', max_length=20, verbose_name='Rareté')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['badge_type', 'points'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nom du niveau')),
                ('level_number', models.PositiveIntegerField(unique=True, verbose_name='Numéro de niveau')),
                ('required_points', models.PositiveIntegerField(verbose_name='Points requis')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('icon', models.CharField(help_text='Icône FontAwesome', max_length=50, verbose_name='Icône')),
                ('color', models.CharField(default='#28a745', max_length=7, verbose_name='Couleur')),
                ('benefits', models.JSONField(blank=True, default=list, verbose_name='Avantages')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
            ],
            options={
                'verbose_name': 'Niveau',
                'verbose_name_plural': 'Niveaux',
                'ordering': ['level_number'],
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la récompense')),
                ('description', models.TextField(verbose_name='Description')),
                ('reward_type', models.CharField(choices=[('points', 'Points'), ('badge', 'Badge'), ('discount', 'Remise'), ('premium_feature', 'Fonctionnalité premium'), ('custom', 'Personnalisé')], max_length=30, verbose_name='Type de récompense')),
                ('value', models.JSONField(verbose_name='Valeur')),
                ('cost', models.PositiveIntegerField(default=0, verbose_name='Coût en points')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
            ],
            options={
                'verbose_name': 'Récompense',
                'verbose_name_plural': 'Récompenses',
                'ordering': ['cost'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la réussite')),
                ('description', models.TextField(verbose_name='Description')),
                ('achievement_type', models.CharField(choices=[('profile_completion', 'Complétion de profil'), ('job_application', 'Candidature'), ('cv_creation', 'Création de CV'), ('skill_verification', 'Vérification de compétences'), ('referral', 'Parrainage'), ('streak', 'Série'), ('social', 'Social'), ('custom', 'Personnalisé')], max_length=30, verbose_name='Type de réussite')),
                ('condition', models.JSONField(verbose_name='Condition')),
                ('points', models.PositiveIntegerField(default=50, verbose_name='Points attribués')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('badge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='gamification.badge', verbose_name='Badge associé')),
            ],
            options={
                'verbose_name': 'Réussite',
                'verbose_name_plural': 'Réussites',
                'ordering': ['achievement_type', 'points'],
            },
        ),
        migrations.CreateModel(
            name='GamificationEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('badge_earned', 'Badge obtenu'), ('level_up', 'Montée de niveau'), ('achievement_completed', 'Réussite terminée'), ('streak_milestone', 'Étape de série'), ('leaderboard_rank', 'Rang dans le classement'), ('reward_claimed', 'Récompense réclamée')], max_length=30, verbose_name="Type d'événement")),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('points_earned', models.PositiveIntegerField(default=0, verbose_name='Points gagnés')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gamification_events', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Événement de gamification',
                'verbose_name_plural': 'Événements de gamification',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du classement')),
                ('leaderboard_type', models.CharField(choices=[('points', 'Points totaux'), ('badges', 'Nombre de badges'), ('applications', 'Candidatures'), ('profile_completion', 'Complétion de profil'), ('streak', 'Série')], max_length=30, verbose_name='Type de classement')),
                ('period', models.CharField(choices=[('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('all_time', 'Tout temps')], max_length=20, verbose_name='Période')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
            ],
            options={
                'verbose_name': 'Classement',
                'verbose_name_plural': 'Classements',
                'ordering': ['leaderboard_type', 'period'],
                'unique_together': {('leaderboard_type', 'period')},
            },
        ),
        migrations.CreateModel(
            name='UserLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0, verbose_name='Points totaux')),
                ('points_to_next_level', models.PositiveIntegerField(default=0, verbose_name="Points jusqu'au niveau suivant")),
                ('level_progress', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Progression (%)')),
                ('last_level_up', models.DateTimeField(blank=True, null=True, verbose_name='Dernière montée de niveau')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('current_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='gamification.level', verbose_name='Niveau actuel')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='level', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Niveau utilisateur',
                'verbose_name_plural': 'Niveaux utilisateurs',
            },
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('claimed_at', models.DateTimeField(auto_now_add=True, verbose_name='Réclamé le')),
                ('is_used', models.BooleanField(default=False, verbose_name='Utilisé')),
                ('used_at', models.DateTimeField(blank=True, null=True, verbose_name='Utilisé le')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='gamification.reward', verbose_name='Récompense')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Récompense utilisateur',
                'verbose_name_plural': 'Récompenses utilisateurs',
                'ordering': ['-claimed_at'],
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField(verbose_name='Rang')),
                ('score', models.PositiveIntegerField(verbose_name='Score')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='gamification.leaderboard', verbose_name='Classement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Entrée de classement',
                'verbose_name_plural': 'Entrées de classement',
                'ordering': ['rank'],
                'unique_together': {('leaderboard', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Streak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('streak_type', models.CharField(choices=[('daily_login', 'Connexion quotidienne'), ('job_application', 'Candidature quotidienne'), ('profile_update', 'Mise à jour de profil'), ('skill_learning', 'Apprentissage de compétences')], max_length=30, verbose_name='Type de série')),
                ('current_streak', models.PositiveIntegerField(default=0, verbose_name='Série actuelle')),
                ('longest_streak', models.PositiveIntegerField(default=0, verbose_name='Plus longue série')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Dernière activité')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streaks', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Série',
                'verbose_name_plural': 'Séries',
                'ordering': ['-current_streak'],
                'unique_together': {('user', 'streak_type')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.PositiveIntegerField(default=0, verbose_name='Progression')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Terminé')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminé le')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='gamification.achievement', verbose_name='Réussite')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Réussite utilisateur',
                'verbose_name_plural': 'Réussites utilisateurs',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True, verbose_name='Obtenu le')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Mis en avant')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='gamification.badge', verbose_name='Badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Badge utilisateur',
                'verbose_name_plural': 'Badges utilisateurs',
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'badge')},
            },
        ),
    ]
