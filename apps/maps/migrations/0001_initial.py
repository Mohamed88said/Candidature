# Generated by Django 5.2.6 on 2025-10-06 15:45

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('jobs', '0003_job_job_description_file_alter_job_company_logo'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MapCluster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom du cluster')),
                ('center_latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Latitude du centre')),
                ('center_longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Longitude du centre')),
                ('job_count', models.PositiveIntegerField(default=0, verbose_name="Nombre d'offres")),
                ('location_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de localisations')),
                ('radius', models.FloatField(verbose_name='Rayon du cluster (km)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
            ],
            options={
                'verbose_name': 'Cluster de carte',
                'verbose_name_plural': 'Clusters de carte',
                'ordering': ['-job_count'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom de la localisation')),
                ('address', models.TextField(verbose_name='Adresse complète')),
                ('city', models.CharField(max_length=100, verbose_name='Ville')),
                ('region', models.CharField(max_length=100, verbose_name='Région')),
                ('country', models.CharField(default='France', max_length=100, verbose_name='Pays')),
                ('postal_code', models.CharField(max_length=20, verbose_name='Code postal')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Latitude')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Longitude')),
                ('is_remote', models.BooleanField(default=False, verbose_name='Télétravail')),
                ('is_hybrid', models.BooleanField(default=False, verbose_name='Hybride')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
            ],
            options={
                'verbose_name': 'Localisation',
                'verbose_name_plural': 'Localisations',
                'ordering': ['city', 'name'],
                'unique_together': {('latitude', 'longitude')},
            },
        ),
        migrations.CreateModel(
            name='MapAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('total_views', models.PositiveIntegerField(default=0, verbose_name='Vues totales')),
                ('unique_users', models.PositiveIntegerField(default=0, verbose_name='Utilisateurs uniques')),
                ('total_searches', models.PositiveIntegerField(default=0, verbose_name='Recherches totales')),
                ('most_viewed_locations', models.JSONField(default=list, verbose_name='Localisations les plus vues')),
                ('most_searched_cities', models.JSONField(default=list, verbose_name='Villes les plus recherchées')),
                ('remote_jobs_views', models.PositiveIntegerField(default=0, verbose_name="Vues d'offres à distance")),
                ('hybrid_jobs_views', models.PositiveIntegerField(default=0, verbose_name="Vues d'offres hybrides")),
                ('on_site_jobs_views', models.PositiveIntegerField(default=0, verbose_name="Vues d'offres sur site")),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
            ],
            options={
                'verbose_name': 'Analytics de carte',
                'verbose_name_plural': 'Analytics de cartes',
                'ordering': ['-date'],
                'unique_together': {('date',)},
            },
        ),
        migrations.CreateModel(
            name='MapHeatmap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intensity', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Intensité')),
                ('job_count', models.PositiveIntegerField(default=0, verbose_name="Nombre d'offres")),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de vues')),
                ('period_start', models.DateTimeField(verbose_name='Début de période')),
                ('period_end', models.DateTimeField(verbose_name='Fin de période')),
                ('calculated_at', models.DateTimeField(auto_now_add=True, verbose_name='Calculé le')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heatmap_data', to='maps.location', verbose_name='Localisation')),
            ],
            options={
                'verbose_name': 'Données de heatmap',
                'verbose_name_plural': 'Données de heatmap',
                'ordering': ['-intensity'],
            },
        ),
        migrations.CreateModel(
            name='MapSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=500, verbose_name='Requête de recherche')),
                ('location_query', models.CharField(blank=True, max_length=200, verbose_name='Localisation recherchée')),
                ('search_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Latitude de recherche')),
                ('search_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Longitude de recherche')),
                ('search_radius', models.FloatField(default=50, verbose_name='Rayon de recherche (km)')),
                ('results_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de résultats')),
                ('filters_applied', models.JSONField(default=dict, verbose_name='Filtres appliqués')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='map_searches', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Recherche de carte',
                'verbose_name_plural': 'Recherches de carte',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MapView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('center_latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Latitude du centre')),
                ('center_longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Longitude du centre')),
                ('zoom_level', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)], verbose_name='Niveau de zoom')),
                ('filters', models.JSONField(default=dict, verbose_name='Filtres appliqués')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='map_views', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Vue de carte',
                'verbose_name_plural': 'Vues de carte',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='JobLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_type', models.CharField(choices=[('primary', 'Localisation principale'), ('secondary', 'Localisation secondaire'), ('remote', 'Télétravail'), ('hybrid', 'Hybride')], default='primary', max_length=20, verbose_name='Type de localisation')),
                ('is_primary', models.BooleanField(default=True, verbose_name='Localisation principale')),
                ('work_days_per_week', models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)], verbose_name='Jours de travail par semaine')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_locations', to='jobs.job', verbose_name="Offre d'emploi")),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_locations', to='maps.location', verbose_name='Localisation')),
            ],
            options={
                'verbose_name': "Localisation d'offre",
                'verbose_name_plural': "Localisations d'offres",
                'ordering': ['-is_primary', 'created_at'],
                'unique_together': {('job', 'location')},
            },
        ),
        migrations.CreateModel(
            name='MapBookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom du signet')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('center_latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Latitude du centre')),
                ('center_longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Longitude du centre')),
                ('zoom_level', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)], verbose_name='Niveau de zoom')),
                ('filters', models.JSONField(default=dict, verbose_name='Filtres sauvegardés')),
                ('is_public', models.BooleanField(default=False, verbose_name='Public')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='map_bookmarks', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Signet de carte',
                'verbose_name_plural': 'Signets de carte',
                'ordering': ['-updated_at'],
                'unique_together': {('user', 'name')},
            },
        ),
    ]
