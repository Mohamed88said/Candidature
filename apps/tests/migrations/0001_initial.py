# Generated by Django 5.2.6 on 2025-10-06 14:32

import cloudinary.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('jobs', '0003_job_job_description_file_alter_job_company_logo'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TestCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('icon', models.CharField(default='fas fa-clipboard-check', max_length=50, verbose_name='Icône')),
                ('color', models.CharField(default='#007bff', max_length=7, verbose_name='Couleur')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
            ],
            options={
                'verbose_name': 'Catégorie de test',
                'verbose_name_plural': 'Catégories de test',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('difficulty', models.CharField(choices=[('beginner', 'Débutant'), ('intermediate', 'Intermédiaire'), ('advanced', 'Avancé'), ('expert', 'Expert')], default='intermediate', max_length=20, verbose_name='Difficulté')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('active', 'Actif'), ('inactive', 'Inactif')], default='draft', max_length=20, verbose_name='Statut')),
                ('time_limit', models.PositiveIntegerField(default=0, help_text='Durée en minutes (0 = illimité)', verbose_name='Durée limite')),
                ('max_attempts', models.PositiveIntegerField(default=3, verbose_name='Tentatives maximum')),
                ('passing_score', models.PositiveIntegerField(default=70, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de réussite (%)')),
                ('questions', models.JSONField(default=list, verbose_name='Questions')),
                ('total_questions', models.PositiveIntegerField(default=0, verbose_name='Nombre total de questions')),
                ('total_points', models.PositiveIntegerField(default=0, verbose_name='Points totaux')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('total_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentatives totales')),
                ('average_score', models.FloatField(default=0, verbose_name='Score moyen')),
                ('completion_rate', models.FloatField(default=0, verbose_name='Taux de réussite')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tests', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='tests.testcategory', verbose_name='Catégorie')),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Tests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('in_progress', 'En cours'), ('completed', 'Terminé'), ('abandoned', 'Abandonné'), ('expired', 'Expiré')], default='in_progress', max_length=20, verbose_name='Statut')),
                ('current_question', models.PositiveIntegerField(default=0, verbose_name='Question actuelle')),
                ('answers', models.JSONField(default=dict, verbose_name='Réponses')),
                ('score', models.FloatField(default=0, verbose_name='Score')),
                ('percentage', models.FloatField(default=0, verbose_name='Pourcentage')),
                ('passed', models.BooleanField(default=False, verbose_name='Réussi')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Commencé le')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminé le')),
                ('time_spent', models.PositiveIntegerField(default=0, help_text='Temps en secondes', verbose_name='Temps passé')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to=settings.AUTH_USER_MODEL, verbose_name='Candidat')),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to='jobs.job', verbose_name="Offre d'emploi")),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='tests.test', verbose_name='Test')),
            ],
            options={
                'verbose_name': 'Tentative de test',
                'verbose_name_plural': 'Tentatives de test',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='TestCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_number', models.CharField(max_length=50, unique=True, verbose_name='Numéro de certificat')),
                ('issued_at', models.DateTimeField(auto_now_add=True, verbose_name='Émis le')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expire le')),
                ('is_valid', models.BooleanField(default=True, verbose_name='Valide')),
                ('certificate_file', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='certificates')),
                ('attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='certificate', to='tests.testattempt', verbose_name='Tentative')),
            ],
            options={
                'verbose_name': 'Certificat de test',
                'verbose_name_plural': 'Certificats de test',
            },
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_results', models.JSONField(default=list, verbose_name='Résultats par question')),
                ('correct_answers', models.PositiveIntegerField(default=0, verbose_name='Réponses correctes')),
                ('incorrect_answers', models.PositiveIntegerField(default=0, verbose_name='Réponses incorrectes')),
                ('skipped_questions', models.PositiveIntegerField(default=0, verbose_name='Questions ignorées')),
                ('strengths', models.JSONField(default=list, verbose_name='Points forts')),
                ('weaknesses', models.JSONField(default=list, verbose_name='Points faibles')),
                ('recommendations', models.TextField(blank=True, verbose_name='Recommandations')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='tests.testattempt', verbose_name='Tentative')),
            ],
            options={
                'verbose_name': 'Résultat de test',
                'verbose_name_plural': 'Résultats de test',
            },
        ),
        migrations.CreateModel(
            name='JobTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_required', models.BooleanField(default=True, verbose_name='Obligatoire')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Ordre')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_tests', to='jobs.job', verbose_name="Offre d'emploi")),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_tests', to='tests.test', verbose_name='Test')),
            ],
            options={
                'verbose_name': "Test d'offre",
                'verbose_name_plural': "Tests d'offres",
                'ordering': ['order', 'test__title'],
                'unique_together': {('job', 'test')},
            },
        ),
        migrations.CreateModel(
            name='TestAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('total_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentatives totales')),
                ('completed_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentatives terminées')),
                ('passed_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentatives réussies')),
                ('average_score', models.FloatField(default=0, verbose_name='Score moyen')),
                ('average_time', models.FloatField(default=0, verbose_name='Temps moyen')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='tests.test', verbose_name='Test')),
            ],
            options={
                'verbose_name': 'Analytics de test',
                'verbose_name_plural': 'Analytics de tests',
                'ordering': ['-date'],
                'unique_together': {('test', 'date')},
            },
        ),
    ]
